(define (enclosing-environment env) (cdr env))
(define (first-frame env) (car env))
(define the-empty-environment '())

(define make-frame (lambda (vars vals)
	(define iter (lambda (vars vals)
		(if (null? vars)
			'()
			(cons (cons (car vars) (car vals))
				(iter (cdr vars) (cdr vals))))))
	(if (= (length vars) (length vals))
		(iter vars vals)
		(error "length dont equal -- MAKE-FRAME"))))

(define frame-variables (lambda (frame)
	(if (null? frame)
		'()
		(cons (caar frame)
			(frame-variables (cdr frame))))))

(define frame-values (lambda (frame)
	(if (null? frame)
		'()
		(cons (cdar frame)
			(frame-values (cdr frame))))))

(define add-binding-to-frame! (lambda (var val frame)
	(define iter (lambda (bind f)
		(if (null? (cdr f))
			(set-cdr! f bind)
			(iter bind (cdr f))) ))
	(iter (list (cons var val)) frame)))

(define lookup-variable-value (lambda (var env)
	(define env-loop (lambda (env)
		(define scan (lambda (frame)
			(cond ((null? frame) (env-loop (enclosing-environment env)))
				((eq? var (caar frame)) (cdar frame))
				(else (scan (cdr frame))) ) ))
		(if (eq? env the-empty-environment)
			(error "Unbound variable" var)
			(let ((frame (first-frame env)))
				(scan frame)))))
	(env-loop env)))

(define set-variable-value! (lambda (var val env)
	(define env-loop (lambda (env)
		(define scan (lambda (frame)
			(cond ((null? frame) (env-loop (enclosing-environment env)))
				((eq? var (caar frame)) (set-cdr! (car frame) val))
				(else (scan (cdr frame))))))
		(if (eq? env the-empty-environment)
			(error "Unbound variable -- SET!" var)
			(let ((frame (first-frame env)))
				(scan frame))) ))
	(env-loop env) ))

(define define-variable! (lambda (var val env)
	(define scan (lambda (frame)
		(cond ((null? frame) (add-binding-to-frame! var val (first-frame env)))
			((eq? var (caar frame)) (set-cdr! (car frame) val))
			(else (scan (cdr frame))))))
	(scan (first-frame env))))
