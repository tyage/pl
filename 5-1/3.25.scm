(define make-table (lambda ()
	(let ((local-table (list '*table*)))
		(define lookup (lambda (keys)
			(lookup-iter keys local-table) ))
		(define lookup-iter (lambda (keys table)
			(if (null? keys)
				#f
				(let ((subtable (assoc (car keys) (cdr table)))
					(subkeys (cdr keys)))
					(if subtable
						(if (null? (cdr keys))
							(cdr subtable)
							(lookup-iter subkeys subtable))
						#f) ) ) ))
		(define insert! (lambda (keys value)
			(insert-iter! keys value local-table) ))
		(define insert-iter! (lambda (keys value table)
			(if (null? keys)
				#f
				(let ((subtable (assoc (car keys) (cdr table)))
					(subkeys (cdr keys)))
					(if subtable
						(if (null? subkeys)
							(set-cdr! subtable value)
							(insert-iter! subkeys value subtable))
						(if (null? subkeys)
							(set-cdr! table
								(cons (cons (car keys) value) (cdr table)))
							(let ((newtable (list (car keys))))
								(set-cdr! table (cons newtable (cdr table)))
								(insert-iter! subkeys value newtable)) ) ) ) ) ))
		(define dispatch (lambda (m)
			(cond ((eq? m 'lookup) lookup)
				((eq? m 'insert!) insert!)
				(else (error "Unknown operation -- TABLE" m)) ) ))
		dispatch) ))