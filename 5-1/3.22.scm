(define make-queue (lambda ()
	(let ((front-ptr '())
		(rear-ptr '()))
	(define set-front-ptr! (lambda (item) (set! front-ptr item)))
	(define set-rear-ptr! (lambda (item) (set! rear-ptr item)))
	(define empty-queue? (lambda () (null? front-ptr)))
	(define front-queue (lambda ()
		(if (empty-queue?)
			(error "FRONT called with an empty queue")
			(car front-ptr)) ))
	(define rear-queue (lambda ()
		(if (empty-queue?)
			(error "REAR called to on empty queue")
			(car rear-ptr)) ))
	(define insert-queue! (lambda (item)
		(let ((new-pair (cons item '())))
			(cond ((empty-queue?)
				(set-front-ptr! new-pair)
				(set-rear-ptr! new-pair)
				front-ptr)
			(else
				(set-cdr! rear-ptr new-pair)
				(set-rear-ptr! new-pair)
				front-ptr) ) ) ))
	(define delete-queue! (lambda ()
		(cond ((empty-queue?)
				(error "DELETE! called with an empty queue"))
			(else
				(set-front-ptr! (cdr front-ptr)) ) ) ))
	(define dispatch (lambda (m)
		(cond ((eq? m 'empty-queue?) empty-queue?)
			((eq? m 'front-queue) front-queue)
			((eq? m 'rear-queue) rear-queue)
			((eq? m 'insert-queue!) insert-queue!)
			((eq? m 'delete-queue!) delete-queue!)
			(else (error "Unknown request -- MAKE-QUEUE")) ) ))
	dispatch) ))